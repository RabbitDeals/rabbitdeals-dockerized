# ======================
# VERSÃO / BUILD
# ======================
GIT_REF=main

# ======================
# RABBITMQ (broker)
# ======================
# Credenciais do container RabbitMQ (e usadas pela API/Python)
RABBITMQ_USER=admin
RABBITMQ_PASS=admin

# Host/porta dentro da rede Docker
RABBITMQ_HOST=rabbitmq
RABBITMQ_PORT=5672
# Porta da UI do RabbitMQ (externa)
RABBITMQ_UI_PORT=15672

# Exchange e filas (usadas pela sua app)
RABBITMQ_EXCHANGE=categoria_exchange
RABBITMQ_QUEUE_ACADEMIA=academia_queue
RABBITMQ_QUEUE_TECNOLOGIA=tecnologia_queue

# ======================
# MONGODB
# ======================
# URI usada pela API e pelo Python no profile "docker"
MONGODB_URI=mongodb://mongodb:27017/produtosdb

# Porta externa do Mongo (mapeada pelo compose)
MONGODB_PORT=27017

# ======================
# MONGO-EXPRESS (UI do Mongo)
# ======================
# Basic auth da UI
ME_USER=admin
ME_PASS=admin
# Porta externa da UI
MONGO_EXPRESS_PORT=8081

# ======================
# API JAVA (SPRING BOOT)
# ======================
# Perfil que o compose ativa para rodar no Docker
SPRING_PROFILES_ACTIVE=docker

# Porta externa da API (mapeada no compose)
API_PORT=8080
# Porta interna do Spring Boot (deixe 8080 se o Dockerfile/actuator assumem 8080)
SERVER_PORT=8080

# Exposição de endpoints do actuator
MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info

# (opcional) Se precisar forçar a main class:
# SPRING_MAIN_MAIN_CLASS=com.rabbitdeals.RabbitDealsApplication

# ======================
# PYTHON APP
# ======================
PYTHON_PORT=5000
# URL interna para a API (do ponto de vista do container python-app)
API_BASE_URL=http://api:8080

# Scraper/configs do seu app Python
SCRAPER_SLEEP_SECS=120
MAX_PAGINAS=1
USER_AGENT=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36

# ======================
# FRONTEND
# ======================
FRONTEND_PORT=80
