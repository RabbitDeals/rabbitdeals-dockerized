# Compose V2 não precisa de "version:"

services:
  # =======================
  # FRONTEND (NGINX) — ajuste se usar outro build
  # =======================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      api:
        condition: service_started
    restart: unless-stopped

  # =======================
  # API JAVA (SPRING BOOT)
  # =======================
  api:
    build:
      context: ./java-api           # pasta onde ficará este Dockerfile
      dockerfile: Dockerfile
      args:
        GIT_REF: ${GIT_REF:-main}
    image: rabbitdeals-dockerized-api:latest
    environment:
      SPRING_PROFILES_ACTIVE: docker
      RABBIT_USER: ${RABBIT_USER}
      RABBIT_PASS: ${RABBIT_PASS}
      SPRING_DATA_MONGODB_URI: ${MONGODB_URI}
    ports:
      - "${SERVER_PORT:-8080}:8080"
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    restart: unless-stopped


  # =======================
  # PYTHON APP (opcional)
  # =======================
  python-app:
    build:
      context: ./python-app
      dockerfile: Dockerfile
    environment:
      API_BASE_URL: http://api:8080
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: ${RABBIT_USER:-admin}
      RABBITMQ_PASS: ${RABBIT_PASS:-admin}
      MONGODB_URI: ${MONGODB_URI:-mongodb://mongodb:27017/produtosdb}
      # exemplos do seu .env
      SCRAPER_SLEEP_SECS: ${SCRAPER_SLEEP_SECS:-120}
      MAX_PAGINAS: ${MAX_PAGINAS:-1}
      USER_AGENT: ${USER_AGENT:-Mozilla/5.0}
    ports:
      - "5000:5000"
    depends_on:
      api:
        condition: service_started
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    restart: unless-stopped

  # =======================
  # MONGODB
  # =======================
  mongodb:
    image: mongo:7
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 20
    restart: unless-stopped

  # =======================
  # MONGO EXPRESS (UI)
  # =======================
  mongo-express:
    image: mongo-express:1.0.2
    environment:
      ME_CONFIG_MONGODB_URL: ${MONGODB_URI:-mongodb://mongodb:27017/produtosdb}
      ME_CONFIG_BASICAUTH_USERNAME: ${ME_USER:-admin}
      ME_CONFIG_BASICAUTH_PASSWORD: ${ME_PASS:-admin}
    depends_on:
      mongodb:
        condition: service_healthy
    ports:
      - "8081:8081"   # http://localhost:8081
    restart: unless-stopped

  # =======================
  # RABBITMQ
  # =======================
  rabbitmq:
    image: rabbitmq:3.13-management
    hostname: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-admin}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS:-admin}
    ports:
      - "5672:5672"    # AMQP
      - "15672:15672"  # UI http://localhost:15672
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 5s
      timeout: 3s
      retries: 20
    restart: unless-stopped

volumes:
  mongo-data:
